--// Brainrot Notifier Hub

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")

--// Config
getgenv().webhook = ""
getgenv().TargetPetNames = {
    "Graipuss Medussi",
    "Los Tralaleritos",
    "La Vacca Saturno Saturnita",
    "La Grande Combination", 
    "Sammyni Spyderini",
    "Garama and Madundung",
}

--// Tracking
local brainrotCountPerBase = {}

--// Teleport Hop Function (same logic as before)
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
pcall(function()
    AllIDs = HttpService:JSONDecode(readfile("NotSameServers.json"))
end)
if typeof(AllIDs) ~= "table" then AllIDs = {actualHour} end

local function TPReturner()
    local Site
    if foundAnything == "" then
        Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end
    for _,v in pairs(Site.data) do
        local id = tostring(v.id)
        if v.playing < v.maxPlayers and not table.find(AllIDs, id) then
            table.insert(AllIDs, id)
            writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
            TeleportService:TeleportToPlaceInstance(PlaceID, id, LocalPlayer)
            wait(4)
        end
    end
    foundAnything = Site.nextPageCursor or ""
end

function hop()
    brainrotCountPerBase = {}
    TPReturner()
end

--// Find My Base
local function findMyBase()
    for _, model in pairs(Workspace:WaitForChild("Plots"):GetChildren()) do
        local success, result = pcall(function()
            return model:FindFirstChild("PlotSign", true)
                and model.PlotSign.SurfaceGui.Frame.TextLabel
        end)
        if success and result and result:IsA("TextLabel") then
            if string.find(result.Text, LocalPlayer.Name .. "'s Base") then
                return model
            end
        end
    end
    return nil
end

--// Webhook Sender
local function sendWebhookMessage(brainrotName, playerNames)
    if webhook == "" or not brainrotName or #playerNames == 0 then return end
    local currentDate = os.date("%m/%d")
    local currentTime = os.date("%I:%M %p")
    local jobId = game.JobId
    local placeId = game.PlaceId

    local joinScript = "game:GetService('TeleportService'):TeleportToPlaceInstance(" .. placeId .. ", '" .. jobId .. "', game.Players.LocalPlayer)"
    local joinLink = "https://roblox.com/games/start?placeId=" .. placeId .. "&gameInstanceId=" .. jobId

    local playerList = table.concat(playerNames, ", ")

    local data = {
        embeds = {{
            title = "ðŸ¦° Target Brainrot Found: " .. brainrotName .. "!",
            description = "**ðŸ‘¤ Players Got:** `" .. playerList .. "`\n" ..
                         "**ðŸ‘¥ Players:** " .. #Players:GetPlayers() .. "/" .. Players.MaxPlayers .. "\n\n" ..
                         "**ðŸ“œ Teleport Script:**\n```lua\n" .. joinScript .. "\n```\n" ..
                         "**[ðŸ”— Click To Join The Server !](" .. joinLink .. ")**",
            color = 0x00FF00,
            thumbnail = {
                url = "https://i.postimg.cc/DZrmnZRQ/images-4-Photoroom.png"
            },
            footer = {
                text = "ðŸ¦° Hub Brainrot Notifier \226\128\162 " .. currentDate .. " \226\128\162 " .. currentTime
            }
        }}
    }

    pcall(function()
        request({
            Url = webhook,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end)
end

--// Check Brainrots in All Bases Except Yours
local function hasTargetBrainrotInOthers()
    local myBase = findMyBase()
    local plots = Workspace:WaitForChild("Plots")
    local brainrotToPlayers = {}

    for _, model in pairs(plots:GetChildren()) do
        if model ~= myBase then
            local ok, label = pcall(function()
                return model:FindFirstChild("PlotSign", true)
                    and model.PlotSign.SurfaceGui.Frame.TextLabel
            end)

            if ok and label and label:IsA("TextLabel") then
                local baseName = label.Text
                local playerName = baseName:match("^(.-)'s Base") or baseName

                if not string.find(baseName, LocalPlayer.Name .. "'s Base") then
                    local podiums = model:FindFirstChild("AnimalPodiums")
                    if podiums then
                        local foundNames = {}
                        for _, podium in pairs(podiums:GetChildren()) do
                            local path = podium:FindFirstChild("Base")
                            if path then path = path:FindFirstChild("Spawn") end
                            if path then path = path:FindFirstChild("Attachment") end
                            if path then path = path:FindFirstChild("AnimalOverhead") end
                            if path then
                                local displayName = path:FindFirstChild("DisplayName")
                                if displayName and displayName:IsA("TextLabel") then
                                    for _, target in ipairs(TargetPetNames) do
                                        if displayName.Text == target then
                                            foundNames[target] = (foundNames[target] or 0) + 1
                                        end
                                    end
                                end
                            end
                        end

                        for name, count in pairs(foundNames) do
                            brainrotCountPerBase[baseName] = brainrotCountPerBase[baseName] or {}
                            local lastCount = brainrotCountPerBase[baseName][name] or 0

                            if count > lastCount then
                                brainrotCountPerBase[baseName][name] = count
                                brainrotToPlayers[name] = brainrotToPlayers[name] or {}
                                table.insert(brainrotToPlayers[name], playerName)
                            end
                        end
                    end
                end
            end
        end
    end

    for brainrotName, playerList in pairs(brainrotToPlayers) do
        sendWebhookMessage(brainrotName, playerList)
    end

    return next(brainrotToPlayers) ~= nil
end

--// Main Loop
spawn(function()
    while wait(10) do
        local found = hasTargetBrainrotInOthers()
        if not found then
            wait(3)
            hop()
        end
    end
end)

print("[Brainrot Notifier Hub] Loaded!")
