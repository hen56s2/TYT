local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer

local PlaceID = game.PlaceId
local hopTimer = getgenv().hop_timer or 3
local TargetPetNames = getgenv().TargetPetNames or {}
local webhook = getgenv().webhook or ""

local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local alreadySent = false

local function loadServerIDs()
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile("NotSameServers.json"))
    end)
    if success and typeof(data) == "table" then
        AllIDs = data
    else
        AllIDs = { actualHour }
        writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
    end
end

local function saveServerID(id)
    table.insert(AllIDs, id)
    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
end

local function TPReturner()
    local baseURL = "https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"
    if foundAnything ~= "" then
        baseURL = baseURL .. "&cursor=" .. foundAnything
    end

    local Site = HttpService:JSONDecode(game:HttpGet(baseURL))

    if Site.nextPageCursor then
        foundAnything = Site.nextPageCursor
    end

    for _, v in pairs(Site.data) do
        local id = tostring(v.id)
        local possible = true

        if v.playing < v.maxPlayers then
            for _, existing in pairs(AllIDs) do
                if id == tostring(existing) then
                    possible = false
                    break
                end
            end

            if possible then
                saveServerID(id)
                print("[HOP] Teleporting to server ID:", id)
                TeleportService:TeleportToPlaceInstance(PlaceID, id, LocalPlayer)
                wait(4)
                return
            end
        end
    end
end

local function hop()
    pcall(function()
        TPReturner()
        if foundAnything ~= "" then
            TPReturner()
        end
    end)
end

local function sendCombinedWebhookMessage(foundNames)
    if webhook == "" or #foundNames == 0 or alreadySent then return end
    alreadySent = true

    local currentDate = os.date("%m/%d")
    local currentTime = os.date("%I:%M %p")
    local jobId = game.JobId
    local placeId = game.PlaceId

    local joinScript = "game:GetService('TeleportService'):TeleportToPlaceInstance(" .. placeId .. ", '" .. jobId .. "', game.Players.LocalPlayer)"
    local joinLink = "https://roblox.com/games/start?placeId=" .. placeId .. "&gameInstanceId=" .. jobId

    local playerCount = #Players:GetPlayers()
    local maxPlayers = Players.MaxPlayers

    local DEFAULT_BRAINROT_IMAGE = "https://i.postimg.cc/6QF94mbh/no-Filter-2025-07-10-T130038-101.webp"
    local FOOTER_ICON = "https://i.postimg.cc/TYYNDqLy/360-F-344120291-QJGt1-B10-MXhq45q-Es-EFEKFGfpt7z-O6-Of-5.jpg"

    local allNames = table.concat(foundNames, ", ")

    local data = {
        embeds = {{
            title = "ðŸ§  Target Brainrots Found: " .. allNames .. "!",
            description =
                "**ðŸ‘¥ Players:** " .. playerCount .. "/" .. maxPlayers .. "\n\n" ..
                "**ðŸ“œ Teleport Script:**\n```lua\n" .. joinScript .. "\n```\n" ..
                "**[ðŸ”— Click To Join The Server !](" .. joinLink .. ")**",
            color = 0x00FF00,
            thumbnail = {
                url = DEFAULT_BRAINROT_IMAGE
            },
            footer = {
                text = "Hub Brainrot Notifier â€¢ " .. currentDate .. " â€¢ " .. currentTime,
                icon_url = FOOTER_ICON
            }
        }}
    }

    pcall(function()
        request({
            Url = webhook,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end)
end

local function findMyBase()
    local plots = Workspace:WaitForChild("Plots")
    for _, model in pairs(plots:GetChildren()) do
        local ok, label = pcall(function()
            return model:FindFirstChild("PlotSign", true)
                and model.PlotSign.SurfaceGui.Frame.TextLabel
        end)
        if ok and label and label:IsA("TextLabel") then
            if string.find(label.Text, LocalPlayer.Name .. "'s Base") then
                return model
            end
        end
    end
    return nil
end

local function scanForBrainrots()
    local myBase = findMyBase()
    local plots = Workspace:WaitForChild("Plots")
    local foundNames = {}

    for _, model in pairs(plots:GetChildren()) do
        if model ~= myBase then
            local ok, label = pcall(function()
                return model:FindFirstChild("PlotSign", true)
                    and model.PlotSign.SurfaceGui.Frame.TextLabel
            end)
            if ok and label and label:IsA("TextLabel") then
                if string.find(label.Text, "'s Base") and not string.find(label.Text, LocalPlayer.Name .. "'s Base") then
                    local animalPodiums = model:FindFirstChild("AnimalPodiums")
                    if animalPodiums then
                        for _, podium in pairs(animalPodiums:GetChildren()) do
                            local path = podium:FindFirstChild("Base")
                            if path then
                                path = path:FindFirstChild("Spawn")
                                if path then
                                    path = path:FindFirstChild("Attachment")
                                    if path then
                                        path = path:FindFirstChild("AnimalOverhead")
                                        if path then
                                            local displayName = path:FindFirstChild("DisplayName")
                                            if displayName and displayName:IsA("TextLabel") then
                                                for _, name in ipairs(TargetPetNames) do
                                                    if displayName.Text == name and not table.find(foundNames, name) then
                                                        table.insert(foundNames, name)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    return foundNames
end

task.spawn(function()
    loadServerIDs()

    while true do
        print("[SCAN] Checking for Brainrots...")
        local foundNames = scanForBrainrots()

        if #foundNames > 0 then
            print("[FOUND] Brainrots in server: ", table.concat(foundNames, ", "))
            sendCombinedWebhookMessage(foundNames)
            task.wait(10) -- recheck in 10s to avoid spamming
        else
            print("[NO BRAINROT] Hopping in " .. hopTimer .. "s...")
            task.wait(hopTimer)
            hop()
            break
        end
    end
end)
